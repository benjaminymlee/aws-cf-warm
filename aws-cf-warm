#!/usr/bin/env python
"""
Warm up CloudFront edge locations.

Args:
    -p --protocol       http / https
    -d --distribution   Distribution hostname e.g. example.com
    -i --ignoressl      (Optional) Ignore SSL issues
    -f --files          Read file paths from config/files.yml
"""

from dns import resolver
import yaml
import os
import time
import argparse
import ssl
import requests
import sys
import subprocess
import uuid
import logging
import signal
from termcolor import colored


class ColorLog(object):

    colormap = dict(
        debug=dict(color='white'),
        info=dict(color='white', attrs=['bold']),
        warn=dict(color='yellow', attrs=['bold']),
        warning=dict(color='yellow', attrs=['bold']),
        error=dict(color='red', attrs=['bold']),
        critical=dict(color='red', attrs=['bold']),
    )

    def __init__(self, logger):
        self._log = logger

    def __getattr__(self, name):
        if name in ['debug', 'info', 'warn', 'warning', 'error', 'critical']:
            return lambda s, *args: getattr(self._log, name)(
                colored(s, **self.colormap[name]), *args)

        return getattr(self._log, name)


temp_dir='/tmp/{}'.format(uuid.uuid4())

logging.basicConfig(level=logging.INFO)
logger = ColorLog(logging.getLogger('aws-cf-warm'))

def handle_interuption(signal, frame):
    logger.error('Warming interupted, some requests may fail...')
    sys.exit(1)

if __name__ == '__main__':
    original_sigint = signal.getsignal(signal.SIGINT)
    signal.signal(signal.SIGINT, handle_interuption)

try:
    with open('config/dns-servers.yml', 'r') as file:
        config = yaml.load(file)
except:
    logger.error('Error loading config/dns-servers.yml')
    quit()
    
def parse_arguments():
    PARSER = argparse.ArgumentParser(description='AWS CloudFront Warming CLI')
    PARSER.add_argument('-d', '--distribution', help="The CloudFront distribution hostname e.g. myapp.com")
    PARSER.add_argument('-p', '--protocol', help="http or https")
    PARSER.add_argument('-i', '--insecure', help="Ignore SSL issues", action='store_true')
    PARSER.add_argument('-f', '--files', help="Read config/files.yml for locating objects", default=False)
    return PARSER.parse_args()

ARGS = parse_arguments()
distribution = ARGS.distribution
protocol = ARGS.protocol
insecure = ARGS.insecure
files = ARGS.files

if files:
    try:
        with open('config/files.yml', 'r') as file:
           file_paths = yaml.load(file)
    except:
        logger.error('Error loading config/files.yml')
        quit()

if insecure:
    logger.info('Ignoring SSL errors')

res = resolver.Resolver()

try:
    os.mkdir(temp_dir)
    os.mkdir('{}/downloads'.format(temp_dir))
except:
    logger.error('Couldnt make a temporary directory for the DNS host aliases')
    sys.exit(1)

# Used to avoid duplicated requests, as some DNS results may overlap
used_cf_ips=[]

for dns in config['ips']:
    ip = dns.values()
    region = dns.keys()[0]
    logger.info('Warming CloudFront distribution {}'.format(distribution))
    logger.info('Using {} DNS server {}'.format(region, ip[0]))
    res.nameservers = ip
    try:
        lookup = res.query(distribution)
    except:
        logger.error('Error resolving distribution hostname: {} using DNS server:'.format(distribution, ip))
        print('Check your distribution is correct using "dig {}" and the DNS server using "dig @{} google.com"'.format(distribution, ip))
        print('If the DNS server seems unhealthy, please file an issue at https://github.com/danielwhatmuff/aws-cf-warm/issues :-)')
        quit()
    else:
        host_file = '/etc/hosts'
        downloads_dir = '{}/downloads'.format(temp_dir)
        sub_env = os.environ.copy()
        for result in lookup:
            if result.address in used_cf_ips:
                logger.info('Skipping duplicate IP {}'.format(result.address))
            else:
                used_cf_ips.append(result.address)
                logger.info('Using resultant IP {}'.format(result.address))
                # Append DNS to hosts file
                with open(host_file, 'a') as file:
                    file.write('{} {}'.format(result.address, distribution))

                wget_base_command = ['wget', '--quiet', '--no-dns-cache', '-P', downloads_dir]

                if protocol == 'https':
                    wget_command = wget_base_command.insert(1, 'TLSv1')
                    wget_command = wget_base_command.insert(1, '--secure-protocol')

                    if insecure == True:
                        wget_command = wget_base_command.insert(2, '--no-check-certificate')

                if files == False:
                    wget_command = wget_base_command.insert(1, '-r')
                    wget_command = wget_base_command.append(distribution)
                    try:
                        exit_code = subprocess.call(wget_command, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)
                    except:
                        logger.error('Requests failed against {} DNS server {}'.format(region, ip[0]))
                elif files == True:
                    for file in file_paths:
                        wget_command = wget_base_command.append(file)
                        try:
                            exit_code = subprocess.call(wget_command, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)
                        except:
                            logger.error('Requests failed against {} DNS server {}'.format(region, ip[0]))
                        finally:
                            wget_command = wget_command[:-1]

                # Remove the last hosts line added above
                with open(host_file, 'r') as file:
                    lines = file.readlines()[:-1]
                with open(host_file, 'w') as file:
                    for line in lines:
                        file.write(line)
                time.sleep(2)
